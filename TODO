===============================================================================
= current
===============================================================================
cursors:
  additional operator for multiple transformations in sequence
    more concise and more efficient
  default void constructor for :=% and friends
    won't be able to support varargs versions, but this is fine
  support non-list pairs

consolidate ui.rkt
  a lot of this is unnecessary

markout:
  design is sucking due to too many special cases; can it be fixed?
  seem to need height management, not just width
    draw tables twice, measuring the first time to provide measurement the second time?
      simplest quick fix; not a long term solution

kanren:
  =/= might be best implemented as a 1st class constraint after all
    simplification based on 'views':
      (=/= ((view a c) (view b c))) implies (=/= (a b))
      generalizes to multiple arg variations:
        (=/= ((view a b c) (view a d e))) implies (=/= (b d) (c e))
        suggesting unification over func-app structure, but this is getting complicated
  maybe function terms are really a bad idea after all
    the benefit they provide is also provided by encoding values
  encodings (such as full-repr) instead of additional constraint system layers
    example: unification of type-encoded values eliminates the need for type constraints
      (symbolo x) ===> (exist (val) (== x (('symbol ()) val)))
      or
      (naturalo x) ===> (exist (val) (== x (('(number real exact integer natural) ()) val)))
      where x is a val that has been lifted by full-repr
    not even 1st class =/= is necessary with the right encoding
      but =/= being 1st class may be much more efficient for many structures
    alternative to functions: implicit encodings that take effect on all unified values
      reification can then perform decoding
  redefine < in terms of compare
  remove deps upon use
  convenient admission of function interpretations
  reification
    deterministic sub-func ordering
    ignore irrelevant sub-funcs
    prettier function-based constraints
      also prune more redundancies
  support alternative search strategies
  constraints
    optional occurs-check?
    https://dtai.cs.kuleuven.be/projects/ALP/newsletter/archive_93_96/net/impl/occur.html
      interesting sub-thread between torkel and pereira
  extended aggregate unification?
    sets and hashes with variable keys may have multiple component orderings
      unification could produce multiple possible subs

===============================================================================
= future
===============================================================================
logic/relational programming
  oleg's lambda term generation: http://okmij.org/ftp/Haskell/AlgorithmsH1.html#random-term

simple proof checker
